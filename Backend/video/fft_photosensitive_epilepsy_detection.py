{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10898214,"sourceType":"datasetVersion","datasetId":6772869},{"sourceId":11427654,"sourceType":"datasetVersion","datasetId":7157079}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # 1. Overview of the Fourier Transform in This Context\n\n# %% [markdown]\n# * Fourier transform is a mathematical tool that decomposes a time-domain signal into its frequency components\n# * When applied to a brightness signal extracted from a video, the Fourier transform reveals which frequencies (i.e., rates of brightness change) have high amplitudes.\n# * Since photosensitive epileptic individuals are most vulnerable to flickering or flashing at certain frequencies, \n# this method can help identify whether a video has excessive brightness variation in the critical frequency ranges\n# \n\n# %% [markdown]\n# # 2. Extraction of the Brightness Signal\n\n# %% [markdown]\n# Convert the video into individual frames. The sampling rate is naturally the video’s frame rate (e.g., 30 or 60 frames per second). Note that a higher frame rate allows better frequency resolution.\n\n# %% [markdown]\n# For each frame, compute a brightness metric. Common methods include:\n# \n# 1. Average Luminance: Compute the average of the luminance (or intensity) values across all pixels.\n# \n# 2. Weighted or Region-specific Analysis: In some cases, it might be useful to consider only specific regions or apply weights if certain parts of the image are more critical.\n\n# %% [markdown]\n# 2.2. Constructing the Time Series\n\n# %% [markdown]\n# Create a one-dimensional signal b(t)where each sample corresponds to the average brightness of a frame at time \n# 𝑡 This signal represents how the overall brightness changes over time\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T00:48:57.544384Z\",\"iopub.execute_input\":\"2025-04-16T00:48:57.544675Z\",\"iopub.status.idle\":\"2025-04-16T00:48:57.550777Z\",\"shell.execute_reply.started\":\"2025-04-16T00:48:57.544653Z\",\"shell.execute_reply\":\"2025-04-16T00:48:57.549855Z\"}}\nimport numpy as np\nimport cv2  # Assuming use of OpenCV for video processing\n\n# Step 1: Extract brightness time series\ndef extract_brightness(video_path):\n    video_capture = cv2.VideoCapture(video_path)\n    brightness_list = []\n    while video_capture.isOpened():\n        ret, frame = video_capture.read()\n        if not ret:\n            break\n        # Convert frame to grayscale\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n        # Compute average brightness\n        avg_brightness = np.mean(gray)\n        brightness_list.append(avg_brightness)\n    video_capture.release()\n    return np.array(brightness_list)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T00:48:59.638218Z\",\"iopub.execute_input\":\"2025-04-16T00:48:59.638591Z\",\"iopub.status.idle\":\"2025-04-16T00:48:59.644072Z\",\"shell.execute_reply.started\":\"2025-04-16T00:48:59.638559Z\",\"shell.execute_reply\":\"2025-04-16T00:48:59.642999Z\"}}\n# Step 2: Preprocess signal (detrend)\ndef preprocess_signal(brightness_signal):\n    return brightness_signal - np.mean(brightness_signal)\n\n\n\n\n# %% [markdown]\n# 4. Applying the Fourier Transform\n# Using the Fast Fourier Transform (FFT), you convert the brightness time series into its frequency domain representation:\n# \n# 𝐵\n# (\n# 𝑓\n# )\n# =\n# =\n# FFT\n# {\n# b\n# (\n# t\n# )\n# }\n# \n# Key points:\n# \n# * Frequency Resolution:\n# The resolution in frequency is determined by the total length of the signal and the sampling rate (i.e., the frame rate). More frames mean higher resolution, letting you pinpoint specific frequencies more precisely.\n# \n# * Magnitude Spectrum:\n# The absolute value \n# ∣\n# 𝐵\n# (\n# 𝑓\n# )\n# ∣\n# ∣B(f)∣ (also referred to as the amplitude spectrum) indicates how strong each frequency component is. High amplitude at particular frequencies means significant periodic changes in brightness.\n# \n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T00:49:01.703411Z\",\"iopub.execute_input\":\"2025-04-16T00:49:01.704236Z\",\"iopub.status.idle\":\"2025-04-16T00:49:01.708534Z\",\"shell.execute_reply.started\":\"2025-04-16T00:49:01.704208Z\",\"shell.execute_reply\":\"2025-04-16T00:49:01.707802Z\"}}\n# Step 3: Compute Fourier Transform\ndef compute_fft(brightness_signal, frame_rate):\n    n = len(brightness_signal)\n    fft_values = np.fft.fft(brightness_signal)\n    freqs = np.fft.fftfreq(n, d=1/frame_rate)\n    return freqs, np.abs(fft_values)\n\n\n\n# %% [markdown]\n# Research and clinical guidelines often point to a vulnerable range for photosensitive epilepsy. Frequently, flashes or flickers that occur in the range of roughly 3–30 Hz are of concern. Focus on:\n# \n# Peak Amplitudes:\n# Look for peaks in \n# ∣\n# 𝐵\n# (\n# 𝑓\n# )\n# ∣\n# ∣B(f)∣ within this frequency range.\n# \n# Energy Distribution:\n# You can compute an energy score by integrating (or summing) the squared magnitudes over the critical band:\n# \n# This energy score can serve as a metric indicating how strong the flicker effect is within the sensitive frequency range\n\n# %% [code]\n# Step 4: Analyze specific frequency band for epilepsy triggers\ndef analyze_spectrum(freqs, amplitudes, fmin=3, fmax=30):\n    # Consider only the positive frequencies\n    mask = (freqs >= fmin) & (freqs <= fmax)\n    critical_energy = np.sum(amplitudes[mask]**2)\n    return critical_energy\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T01:22:54.726575Z\",\"iopub.execute_input\":\"2025-04-16T01:22:54.727065Z\",\"iopub.status.idle\":\"2025-04-16T01:22:58.805231Z\",\"shell.execute_reply.started\":\"2025-04-16T01:22:54.726882Z\",\"shell.execute_reply\":\"2025-04-16T01:22:58.804342Z\"}}\n\n# Main execution\nvideo_path = '/kaggle/input/photsensitive-epi-trigger-1/(SEIZURE WARNING) Claw Brightness gone too crazy.mp4'\nframe_rate = 30  # Replace with actual video frame rate if known\n\nbrightness_signal = extract_brightness(video_path)\nprocessed_signal = preprocess_signal(brightness_signal)\nfreqs, amplitudes = compute_fft(processed_signal, frame_rate)\ncritical_energy = analyze_spectrum(freqs, amplitudes)\n\n# Define an arbitrary threshold (this would be based on research or experimental calibration)\nthreshold = 1e5  \nif critical_energy > threshold:\n    print(\"Warning: Video may contain epilepsy-triggering flicker patterns.\")\nelse:\n    print(\"Video passed the brightness flicker check.\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T01:26:35.784352Z\",\"iopub.execute_input\":\"2025-04-16T01:26:35.784630Z\",\"iopub.status.idle\":\"2025-04-16T01:26:35.790404Z\",\"shell.execute_reply.started\":\"2025-04-16T01:26:35.784608Z\",\"shell.execute_reply\":\"2025-04-16T01:26:35.789422Z\"}}\n# Wrapper function\ndef check_epilepsy_trigger(video_path, frame_rate=30, threshold=1e5):\n    brightness_signal = extract_brightness(video_path)\n    if len(brightness_signal) == 0:\n        return \"Error: No frames extracted from video.\"\n    processed_signal = preprocess_signal(brightness_signal)\n    freqs, amplitudes = compute_fft(processed_signal, frame_rate)\n    critical_energy = analyze_spectrum(freqs, amplitudes)\n    \n    if critical_energy > threshold:\n        return \"Epilepsy Triggering\"\n    else:\n        return \"Safe\"\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-04-16T01:26:37.513527Z\",\"iopub.execute_input\":\"2025-04-16T01:26:37.513949Z\",\"iopub.status.idle\":\"2025-04-16T01:26:41.562015Z\",\"shell.execute_reply.started\":\"2025-04-16T01:26:37.513894Z\",\"shell.execute_reply\":\"2025-04-16T01:26:41.560960Z\"}}\n# Example usage\nresult = check_epilepsy_trigger(\"/kaggle/input/photsensitive-epi-trigger-1/( ) Rambler- 2004   .mp4\", frame_rate=30)\nprint(result)","metadata":{"_uuid":"000f14c0-c2fd-4d20-831a-db35f68da9bb","_cell_guid":"fd244749-5dd7-479a-ac5d-b698a35c44f1","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}